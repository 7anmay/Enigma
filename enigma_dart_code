final alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
final rotor = ["EKMFLGDQVZNTOWYHXUSPAIBRCJ","AJDKSIRUXBLHWTMCQGZNPYFVOE","BDFHJLCPRTXVZNYEIWGAKMUSQO","ESOVPZJAYQUIRHXLNFTGKDCMWB","VZBRGITYUPSDNHLXAWMJQOFECK"];
final Notch = "QEVJZ";
final reflector = [{"A":"Y","Y":"A","B":"R","R":"B","C":"U","U":"C","D":"H","H":"D","E":"Q","Q":"E","F":"S","S":"F","G":"L","L":"G","I":"P","P":"I","J":"X","X":"J","K":"N","N":"K","M":"O","O":"M","T":"Z","Z":"T","V":"W","W":"V"}   , {"A":"F","F":"A","B":"V","V":"B","C":"P","P":"C","D":"J","J":"D","E":"I","I":"E","G":"O","O":"G","H":"Y","Y":"H","K":"R","R":"K","L":"Z","Z":"L","M":"X","X":"M","N":"W","W":"N","Q":"T","T":"Q","S":"U","U":"S"}];

///// The inputs to be taken /////
// KEY SETTING: ZIN
// RING SETTING: EWZ
// ROTORS: 314
// PLUGBOARD: AT BS DE FM IR KN LZ OW PV HQ

String start_str = "ZIN";
String ring_str = "EWZ";
String rotor_config = "314";
final plugboard = {"A":"T", "B":"S", "D":"E", "F":"M", "I":"R", "K":"N", "L":"Z", "O":"W", "P":"V", "H":"Q","T":"A", "S":"B", "E":"D", "M":"F", "R":"I", "N":"K", "Z":"L", "W":"O", "V":"P", "Q":"H"};

String coded = "TANMAY"; 


int subs_no(String cod, String start, String ringg){
  var strt = start.codeUnitAt(0);
  var code = cod.codeUnitAt(0);
  var ring = ringg.codeUnitAt(0);
  var val;
  if( code > strt){
    val = (code % strt + ring) % 26;
  }
    else{
    val = (26 - (strt% code) - 1 + ring) % 26;
   }
  return val;
  }

String iterator(String Start, String rotor_config){
  var config = [];
  var strt = Start.runes.toList();
  var noch = Notch.runes.toList();
  for(int i=0; i<3; i++){
  config.insert(i, int.parse(rotor_config[i]));
  }
  strt[0] = (strt[0]+1 > 90)? ((strt[0] + 1) % 90 + 65) : strt[0] + 1 ;  
  if (strt[0] == noch[config[0]]){
    strt[1] = (strt[1]+1 > 90)? ((strt[1] + 1) % 90 + 65) : strt[1] + 1 ;
      if(strt[1] == noch[config[1]]){
        strt[1] = (strt[2]+1 > 90)? ((strt[2] + 1) % 90 + 65) : strt[2] + 1 ;
      }
  }
 Start = new String.fromCharCodes(strt);
 return Start;  
} 
  

String enigma(String start_str, String ring_str, String rotor_config, var plugboard, String coded){
  //var key = start_str;
  String encrypted = "";
  for(int i=0; i<coded.length; i++){
   start_str =  iterator(start_str, rotor_config);
   
   //enter plug_swap
    var code = plugboard[coded[i]];
   //end plug_swap
    
   int val = subs_no(code,start_str[2], ring_str[2]);
   code = rotor[int.parse(rotor_config[2])-1][val];
   val = subs_no(code,start_str[1], ring_str[1]);  
   code = rotor[int.parse(rotor_config[1])-1][val];
   val = subs_no(code,start_str[0], ring_str[0]);
   code = rotor[int.parse(rotor_config[0])-1][val];
   // reflectorB begin :::::
    code = reflector[1][code];
   // reflectorB end   ::::: 
   val = subs_no(code,start_str[0], ring_str[0]);
   code = rotor[int.parse(rotor_config[0])-1][val];
   val = subs_no(code,start_str[1], ring_str[1]);  
   code = rotor[int.parse(rotor_config[1])-1][val];
   val = subs_no(code,start_str[2], ring_str[2]);
   code = rotor[int.parse(rotor_config[2])-1][val];
    
    //enter plug_swap
   code = plugboard[code];
    //end plug_swap
    
    //encrypted letter recieved:
   encrypted = encrypted + code;
  }
  
  return encrypted;
}
void main() {
    
 
 String msg;
 msg = enigma(start_str, ring_str, rotor_config, plugboard, coded);
 print(msg);
}
